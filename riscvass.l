%{
    //c.l (for flex)
    #include <iostream>
    #include <stdio.h>
    #include "linux/elf.h"

    //generated by bison
    #include "riscvass.tab.h"

    using namespace std;
    extern int yylex();
    extern int yyparse();

    int linenum = 0;
    int charnum = 0;
%}

%option noyywrap

/* named regexes */

%%
[\t ]            {; }
"#".*            {; /* ignore everything this line */ }
[\n]             { ++linenum; charnum=0; }
[\\n]            { ++linenum; charnum=0; }

"add"            { return ADD; }
"addi"           { return ADD_IMM; }
"and"            { return AND; }
"sub"            { return SUB; }
"subi"           { return SUB_IMM; }
"sll"            { return SLL; }
"slt"            { return SLT; }
"xor"            { return XOR; }
"li"             { return LOAD_IMM; }
"ecall"          { return ECALL; }

_[a-zA-Z0-9]*:   { return LABEL; }
_[a-zA-A0-9]*    { return LABELLED; }

"0"              { return yylval.ival = 0; return REG; }
"zero"           { return yylval.ival = 0; return REG; }

[1-9]?[0-9]      {
                    //TODO: plain it?
                    yylval.ival = atoi(&yytext[1]);
                    return IMM;
                 }
[arx][0-9]       { yylval.ival = atoi(&yytext[1]); return REG; }
\."section"      { return SECTION; }
\."text"         { return D_TEXT; }
\."data"         { return D_DATA; }
\."rodata"       { return D_RODATA; }
\."bss"          { return D_BSS; }
\."size"         { return D_SIZE; }
\."globl"        { return D_GLOBAL; }
\."ascii"        { return D_ASCII; }

\.[a-zA-Z0-9]*   { return DIRECTIVE_COMMAND; }
[a-zA-Z0-9]*:    { return ASSIGNMENT; }
\"([^\"]*)\"     { yylval.sval = strdup(yytext);  return STRING; }
,                { return COMMA; }
.                { cout << "Line "<< linenum << ": char " << charnum << ", unknown token. (" << yytext << ")" << endl; }
%%

