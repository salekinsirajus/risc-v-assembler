%{
    //c.l (for flex)
    #include <iostream>
    #include <stdio.h>
    #include "linux/elf.h"

    //generated by bison
    #include "riscvass.tab.h"

    using namespace std;
    extern int yylex();
    extern int yyparse();

    int linenum = 0;
    int charnum = 0;
%}

%option noyywrap

/* named regexes */

%%
[\t ]            {; }
"#".*            {; /* ignore everything this line */ }
[\n]             { ++linenum; charnum=0; }
[\\n]            { ++linenum; charnum=0; }

\."section"		 { return SECTION; }
\.text			 { return TEXT; }

"add"            { return ADD; }
"addi"           { return ADD_IMM; }
"and"            { return AND; }
"sub"            { return SUB; }
"subi"           { return SUB_IMM; }
"sll"            { return SLL; }
"slt"            { return SLT; }
"xor"            { return XOR; }
_[a-zA-Z0-9]*:   { return LABEL; }

[12][0-9]        { yylval.ival = atoi(&yytext[1]); return IMM; }

[rx][0-9]        { yylval.ival = atoi(&yytext[1]); return REG; }
,                { return COMMA; }
.                { cout << "Line "<< linenum << ": char " << charnum << ", unknown token. (" << yytext << ")" << endl; }
%%

int main(int argc, char** argv){
    if (argc < 2){
        cout << "No source file passed\n" << endl;
        cout << "Usage: " << argv[0] << " file.c" << endl;
        return 1;
    }
    FILE *src = fopen(argv[1], "r");
    if (!src){
        cout << "Error: Cannot open file " << argv[1] << endl;
        return -1; //really -1?
    }        

    // Set lex to read from the file instead of STDIN
    yyin = src;
    
    yyparse();
    while(yylex());
    
    //close file
    fclose(src);

    //std::string dst = "out.data";
    //write_empty_elf(dst);

    return 0;
}
